#! /usr/bin/env node

'use strict';

process.on('unhandledRejection', error => { throw error; });

const BrianWhiteImap = require('imap');
const Bluebird = require('bluebird');
const mkdirp = Bluebird.promisify(require('mkdirp'));
const path = require('path');
const fs = Bluebird.promisifyAll(require('fs'));
const config = require('./config');

const useImap = callback => {
  const imap = Bluebird.promisifyAll(new BrianWhiteImap(config.imap));
  console.log(`Connecting and authenticating...`);
  imap.connect();
  imap.once('ready', () => {
    Bluebird.try(() => callback(imap)).finally(() => {
      console.log(`Disconnecting...`);
      imap.end();
    });
  });
};

// TODO Iterate recursively
const forEachMailbox = (imap, callback) => {
  console.log(`Obtaining mailboxes...`);
  return imap.getBoxesAsync().then(mailboxes => {
    return Object.entries(mailboxes)
      .map(([name, mailbox]) => Object.assign(mailbox, {name})) // TODO Shouldn't this be done already?
      .reduce((whenPreviousDone, mailbox) => {
        return whenPreviousDone.then(() => callback(mailbox));
      }, Promise.resolve());
  });
};

const useMailbox = (imap, mailbox, callback) => {
  console.log(`Opening mailbox "${mailbox.name}"...`);
  return imap.openBoxAsync(mailbox.name, /* read-only */ true).then(() => {
    return Bluebird.try(callback);
  });
};

const streamToString = stream => {
  return new Promise((resolve, reject) => {
    let string = '';
    stream
      .on('data', data => string += data.toString('utf8'))
      .on('error', reject)
      .on('end', () => resolve(string));
  });
};

const forEachMailboxMessage = (imap, mailbox, callback) => {
  return useMailbox(imap, mailbox, () => {
    return new Promise((resolve, reject) => {
      console.log(`Retrieving messages...`);
      imap.fetch('1:*', {bodies: ''})
        .on('message', message => {
          let whenBody, uid;
          message
            // TODO Do we have to convert it to a string if all we do is to save
            // it to a file?
            .on('body', stream => whenBody = streamToString(stream))
            .on('attributes', attributes => uid = attributes.uid)
            .on('end', () => whenBody.then(body => callback({uid, body})));
        })
        .on('error', reject)
        .on('end', resolve);
    });
  });
};

const getMailboxPath = mailbox => {
  let path = '';
  for (let current = mailbox; current; current = mailbox.parent) {
    if (path) path = `/${path}`;
    path = `${current.name}${path}`; // TODO Sanitize
  }
  return path;
};

useImap(imap => {
  return forEachMailbox(imap, mailbox => {
    if (mailbox.name != 'INBOX') { // TODO Remove me
      console.log(`Skipping ${mailbox.name}...`);
      return;
    }
    return forEachMailboxMessage(imap, mailbox, message => {
      const messageFile = `backup/${getMailboxPath(mailbox)}/${message.uid}.eml`; 
      console.log(`Saving message to ${messageFile}...`);
      return mkdirp(path.dirname(messageFile))
        .then(() => fs.writeFileAsync(messageFile, message.body));
    });
  });
});
