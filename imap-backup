#! /usr/bin/env node

'use strict';

process.on('unhandledRejection', error => {
  throw error;
});

const Bluebird = require('bluebird');
const mkdirp = Bluebird.promisify(require('mkdirp'));
const nodePath = require('path');
const fs = Bluebird.promisifyAll(require('fs'));
const config = require('./config');
const Account = require('./src/account');
const multimatch = require('multimatch');
const simpleParser = require('mailparser').simpleParser;

const backupBasePath = process.argv[2] || (() => {
  throw new Error('Backup base path not specified');
})();

const fileExists = path => {
  return fs.accessAsync(path).then(
    () => {
      return true;
    },
    () => {
      return false;
    }
  );
};

const saveMessage = (message, path) => {
  return message.fetchBody().then(
    body => {
      console.log(`Saving message to "${path}"...`);
      return mkdirp(nodePath.dirname(path)).then(() => {
        return new Promise(resolve => {
          body.on('end', resolve).pipe(fs.createWriteStream(path));
        });
      });
    },
    error => {
      console.error(`Error fetching the message body: ${error}`);
    }
  );
};

const processMessage = message => {
  const backupPath = `${backupBasePath}/${message.backupPath}`;
  return fileExists(backupPath)
    .then(exists => {
      if (!exists) return saveMessage(message, backupPath);
    })
    .then(() => {
      // TODO Avoid reading messages that were just saved
      return fs.readFileAsync(backupPath).then(data => {
        return simpleParser(data).then(message => {
          if (!message.date) console.log(message);
          const timestamp = message.date.getTime() / 1000;
          return fs.utimesAsync(backupPath, timestamp, timestamp);
        });
      });
    });
};

new Account(config.imap).connect(account => {
  return Bluebird.mapSeries(account.getMailboxes(), mailbox => {
    if (!multimatch(mailbox.fullName, config.mailboxes).length) {
      console.log(`Skipping ${mailbox}...`);
      return;
    }
    return mailbox.getMessages().then(messages => {
      return Bluebird.mapSeries(messages, processMessage);
    });
  });
});
