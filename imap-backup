#! /usr/bin/env node

'use strict';

process.on('unhandledRejection', error => { throw error; });

const Bluebird = require('bluebird');
const mkdirp = Bluebird.promisify(require('mkdirp'));
const path = require('path');
const fs = Bluebird.promisifyAll(require('fs'));
const config = require('./config');
const Account = require('./src/account');

new Account(config.imap).connect(account => {
  return Bluebird.mapSeries(account.getMailboxes(), mailbox => {
    if (!(config.mailboxes || []).includes(mailbox.name)) {
      console.log(`Skipping ${mailbox}...`);
      return;
    }
    console.log(`Getting messages for ${mailbox}...`);
    return mailbox.getMessages(message => {
      const backupPath = `backup/${message.getBackupPath()}`; 
      console.log(`Saving message to ${backupPath}...`);
      return mkdirp(path.dirname(backupPath))
        .then(() => fs.writeFileAsync(backupPath, message.body));
    });
  })
})
