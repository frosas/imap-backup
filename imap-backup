#! /usr/bin/env node

'use strict';

process.on('unhandledRejection', error => { throw error; });

const Bluebird = require('bluebird');
const mkdirp = Bluebird.promisify(require('mkdirp'));
const path = require('path');
const fs = Bluebird.promisifyAll(require('fs'));
const config = require('./config');
const Account = require('./src/account');

const saveMessage = message => {
  const backupPath = `backup/${message.getBackupPath()}`; 
  return fs.accessAsync(backupPath).then(
    () => {
      console.log(`Skipping ${message} (already saved)`);
    },
    () => {
      return message.fetchBody().then(body => {
        console.log(`Saving message to "${backupPath}"...`);
        return mkdirp(path.dirname(backupPath))
          .then(() => fs.writeFileAsync(backupPath, body));
      });
    }
  );
};

new Account(config.imap).connect(account => {
  return Bluebird.mapSeries(account.getMailboxes(), mailbox => {
    if (!(config.mailboxes || []).includes(mailbox.name)) {
      console.log(`Skipping ${mailbox}...`);
      return;
    }
    return mailbox.getMessages().then(messages => {
      return Bluebird.mapSeries(messages, saveMessage);
    });
  })
})
